{"code":"import particleAPI from './particleAPI';\r\nclass Engine {\r\n    constructor(numberOfParticles) {\r\n        this.numberOfParticles = numberOfParticles;\r\n        this.initializeEngine();\r\n    }\r\n    initializeEngine() {\r\n        // positionBuffer holds [position_x, position_y] for all particles\r\n        const positionBuffer = new ArrayBuffer(this.numberOfParticles * 2 * 4);\r\n        // physicsBuffer holds [mass, velocity_x, velocity_y, force_x, force_y] for all particles\r\n        const physicsBuffer = new ArrayBuffer(this.numberOfParticles * 5 * 4);\r\n        // this.uint8ViewOnPositionData = new Uint8Array(positionBuffer)\r\n        this.positionData = new Float32Array(positionBuffer);\r\n        this.physicsData = new Float32Array(physicsBuffer);\r\n        // set mass of all particles to 1\r\n        for (let i = 0; i < this.numberOfParticles; i++) {\r\n            this.physicsData[i * 5 + 4] = 1;\r\n        }\r\n    }\r\n    setParticlesParams(cb) {\r\n        for (let i = 0; i < this.numberOfParticles; i++) {\r\n            cb(i, particleAPI(i, this.positionData, this.physicsData));\r\n        }\r\n    }\r\n    start(time) {\r\n        this.time = time;\r\n    }\r\n    update(time) {\r\n        const dt = time - this.time;\r\n        this.time = time;\r\n        this.updateParticles(dt);\r\n    }\r\n    updateParticles(dt) {\r\n        for (let i = 0; i < this.numberOfParticles; i++) {\r\n            const positionOffset = i * 2;\r\n            const physicsOffset = i * 5;\r\n            const x = this.positionData[positionOffset];\r\n            const y = this.positionData[positionOffset];\r\n            this.behaviors.forEach((behavior) => {\r\n                behavior.update(dt, x, y, this.physicsData, physicsOffset);\r\n            });\r\n            euler.update(dt, x, y, this.positionData, positionOffset, this.physicsData, physicsOffset);\r\n            this.physicsData[physicsOffset + 2] = 0;\r\n            this.physicsData[physicsOffset + 3] = 0;\r\n        }\r\n    }\r\n    addBehavior(behavior) {\r\n        const behaviorInstance = new behavior;\r\n        this.behaviors.concat(behaviorInstance);\r\n        return behaviorInstance;\r\n    }\r\n    removeBehavior(behavior) {\r\n        const index = this.behaviors.findIndex((b) => b === behavior);\r\n        this.behaviors = this.behaviors.slice(0, index).concat(this.behaviors.slice(index + 1));\r\n    }\r\n}\r\nexport default Engine;\r\n"}
